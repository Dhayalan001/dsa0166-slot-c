#include <iostream>

class MyArray {
private:
    int* arr;
    int size;

public:
    MyArray(int size) : size(size) {
        arr = new int[size];
    }

    ~MyArray() {
        delete[] arr;
    }

    // Overload the [] operator
    int& operator[](int index) {
        if (index >= 0 && index < size) {
            return arr[index];
        } else {
            std::cerr << "Index out of bounds" << std::endl;
            exit(EXIT_FAILURE);
        }
    }

    // Function to set value at a given index
    void setValue(int index, int value) {
        if (index >= 0 && index < size) {
            arr[index] = value;
        } else {
            std::cerr << "Index out of bounds" << std::endl;
            exit(EXIT_FAILURE);
        }
    }

    // Function to get size of the array
    int getSize() const {
        return size;
    }
};

int main() {
    MyArray myArray(5);

    // Set values using setValue function
    for (int i = 0; i < myArray.getSize(); ++i) {
        myArray.setValue(i, i * 10);
    }

    // Access values using overloaded [] operator
    for (int i = 0; i < myArray.getSize(); ++i) {
        std::cout << "myArray[" << i << "] = " << myArray[i] << std::endl;
    }

    return 0;
}
out put :
myArray[0] = 0
myArray[1] = 10
myArray[2] = 20
myArray[3] = 30
myArray[4] = 40
