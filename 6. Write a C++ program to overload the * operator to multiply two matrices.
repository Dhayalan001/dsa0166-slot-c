#include <iostream>
#include <vector>

class Matrix {
private:
    std::vector<std::vector<int>> data;
    int rows, cols;

public:
    Matrix(int rows, int cols) : rows(rows), cols(cols) {
        data.resize(rows, std::vector<int>(cols, 0));
    }

    // Function to set value at a given position
    void setValue(int row, int col, int value) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            data[row][col] = value;
        } else {
            std::cerr << "Index out of bounds" << std::endl;
            exit(EXIT_FAILURE);
        }
    }

    // Overload the * operator
    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            std::cerr << "Matrix dimensions do not match for multiplication" << std::endl;
            exit(EXIT_FAILURE);
        }

        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Function to print the matrix
    void print() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    // Define two matrices
    Matrix mat1(2, 3);
    Matrix mat2(3, 2);

    // Set values for the first matrix
    mat1.setValue(0, 0, 1);
    mat1.setValue(0, 1, 2);
    mat1.setValue(0, 2, 3);
    mat1.setValue(1, 0, 4);
    mat1.setValue(1, 1, 5);
    mat1.setValue(1, 2, 6);

    // Set values for the second matrix
    mat2.setValue(0, 0, 7);
    mat2.setValue(0, 1, 8);
    mat2.setValue(1, 0, 9);
    mat2.setValue(1, 1, 10);
    mat2.setValue(2, 0, 11);
    mat2.setValue(2, 1, 12);

    // Multiply the matrices
    Matrix result = mat1 * mat2;

    // Print the result
    std::cout << "Result of matrix multiplication:" << std::endl;
    result.print();

    return 0;
}
out put :
Result of matrix multiplication:
58 64 
139 154
